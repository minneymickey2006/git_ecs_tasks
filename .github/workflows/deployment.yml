name: deployment
on:
  workflow_dispatch: 

env:
  preprod_ecr: 451161856870.dkr.ecr.ap-southeast-2.amazonaws.com/adventureworks-dbt-preprod
  prod_ecr: 451161856870.dkr.ecr.ap-southeast-2.amazonaws.com/adventureworks-dbt-prod

jobs: 
  build: 
    runs-on: ubuntu-latest
    steps: 
      # git checkout 
      - name: checkout code
        uses: actions/checkout@v3
      
      # set up docker buildx 
      - name: set up docker buildx 
        uses: docker/setup-buildx-action@v2
      
      # login to preprod elastic container registry (ECR)
      - name: login to preprod ecr
        uses: docker/login-action@v2
        with:
          registry: ${{ env.preprod_ecr }}
          username: ${{ secrets.AWS_ACCESS_KEY_ID }}
          password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      
      # login to prod elastic container registry (ECR)
      - name: login to prod ecr
        uses: docker/login-action@v2
        with:
          registry: ${{ env.prod_ecr }}
          username: ${{ secrets.AWS_ACCESS_KEY_ID }}
          password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # build and push the adventure world dbt docker image 
      - name: docker build and push
        uses: docker/build-push-action@v2
        with:
          context: ./transform/dbt
          push: true
          tags: |
            ${{ env.preprod_ecr }}:${{ github.sha }}
            ${{ env.prod_ecr }}:${{ github.sha }}
  
  preprod: 
    needs: build
    runs-on: ubuntu-latest
    steps: 
      # git checkout 
      - name: checkout code
        uses: actions/checkout@v3

      # update the ecs task definition
      - name: update preprod task definition 
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: transform/dbt/task-definition.preprod.json
          container-name: dbt-preprod
          image: ${{ env.preprod_ecr }}:${{ github.sha }}
          environment-variables: | 
            DB_HOST=${{ secrets.DB_HOST }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            TARGET=preprod

      # configure your aws credentials
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-2

      # deploy preprod ecs task definition
      - name: deploy preprod ecs task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}

      # run the ecs task
      - name: run ecs task 
        id: run_ecs
        run: |
          task_arn=$(aws ecs run-task --task-definition dbt-preprod --cluster dbt-cluster | jq '.tasks[0].taskArn' --raw-output) 
          echo $task_arn
          echo "::set-output name=task_arn::${task_arn}"

      # wait for the ecs task to stop, and check the exit code 
      - name: wait until task has stopped and check exit code 
        run: | 
          aws ecs wait tasks-stopped --cluster dbt-cluster --tasks ${{ steps.run_ecs.outputs.task_arn }}
          exit_code=$(aws ecs describe-tasks --cluster dbt-cluster --tasks ${{ steps.run_ecs.outputs.task_arn }} | jq '.tasks[0].containers[0].exitCode' --raw-output)
          exit ${exit_code}
  
  prod: 
    needs: preprod
    runs-on: ubuntu-latest
    steps: 
      # git checkout 
      - name: checkout code
        uses: actions/checkout@v3

      # update the ecs task definition
      - name: update prod task definition 
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: transform/dbt/task-definition.prod.json
          container-name: dbt-prod
          image: ${{ env.prod_ecr }}:${{ github.sha }}
          environment-variables: | 
            DB_HOST=${{ secrets.DB_HOST }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            TARGET=prod

      # configure your aws credentials
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-2

      # deploy preprod ecs task definition
      - name: deploy prod ecs task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}

      # run the ecs task
      - name: run ecs task 
        id: run_ecs
        run: |
          task_arn=$(aws ecs run-task --task-definition dbt-prod --cluster dbt-cluster | jq '.tasks[0].taskArn' --raw-output) 
          echo $task_arn
          echo "::set-output name=task_arn::${task_arn}"

      # wait for the ecs task to stop, and check the exit code 
      - name: wait until task has stopped and check exit code 
        run: | 
          aws ecs wait tasks-stopped --cluster dbt-cluster --tasks ${{ steps.run_ecs.outputs.task_arn }}
          exit_code=$(aws ecs describe-tasks --cluster dbt-cluster --tasks ${{ steps.run_ecs.outputs.task_arn }} | jq '.tasks[0].containers[0].exitCode' --raw-output)
          exit ${exit_code}
